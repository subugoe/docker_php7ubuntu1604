FROM ubuntu:16.04

# phpize deps
RUN apt-get update && apt-get install -y \
		autoconf \
		file \
		g++ \
		gcc \
		libc-dev \
		make \
		wget \
		pkg-config \
		re2c \
                libpng-dev \
                libjpeg-dev \
                libxpm-dev \
                libfreetype6-dev \
                libgmp-dev \
 		libmagick-dev \
                libgmp3-dev \
                libmcrypt-dev \
	--no-install-recommends && rm -r /var/lib/apt/lists/*

# persistent / runtime deps
RUN apt-get update && apt-get install -y \
		ca-certificates \
                unzip \
		curl \
		libedit2 \
		libsqlite3-0 \
		libxml2 \
	--no-install-recommends && rm -r /var/lib/apt/lists/*

ENV PHP_INI_DIR /usr/local/etc/php
RUN mkdir -p $PHP_INI_DIR/conf.d

##<autogenerated>##
ENV PHP_EXTRA_CONFIGURE_ARGS --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data
##</autogenerated>##

ENV GPG_KEYS A917B1ECDA84AEC2B568FED6F50ABC807BD5DCD0 528995BFEDFBA7191D46839EF9BA0ADA31CBD89E

ENV PHP_VERSION 7.1.1
ENV PHP_FILENAME php-7.1.1.tar.xz
ENV PHP_SHA256 b3565b0c1441064eba204821608df1ec7367abff881286898d900c2c2a5ffe70

RUN set -xe \
	&& buildDeps=" \
		$PHP_EXTRA_BUILD_DEPS \
		libcurl4-openssl-dev \
		libedit-dev \
		libsqlite3-dev \
		libssl-dev \
		libxml2-dev \
		xz-utils \
	" \
	&& apt-get update && apt-get install -y $buildDeps --no-install-recommends && rm -rf /var/lib/apt/lists/* \
	&& curl -fSL "http://php.net/get/$PHP_FILENAME/from/this/mirror" -o "$PHP_FILENAME" \
	&& echo "$PHP_SHA256 *$PHP_FILENAME" | sha256sum -c - \
	&& curl -fSL "http://php.net/get/$PHP_FILENAME.asc/from/this/mirror" -o "$PHP_FILENAME.asc" \
	&& export GNUPGHOME="$(mktemp -d)" \
	&& for key in $GPG_KEYS; do \
		gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "$key"; \
	done \
	&& gpg --batch --verify "$PHP_FILENAME.asc" "$PHP_FILENAME" \
	&& rm -r "$GNUPGHOME" "$PHP_FILENAME.asc" \
	&& mkdir -p /usr/src/php \
	&& tar -xf "$PHP_FILENAME" -C /usr/src/php --strip-components=1 \
	&& rm "$PHP_FILENAME" \
	&& cd /usr/src/php \
	&& ./configure \
		--with-config-file-path="$PHP_INI_DIR" \
		--with-config-file-scan-dir="$PHP_INI_DIR/conf.d" \
		$PHP_EXTRA_CONFIGURE_ARGS \
		--disable-cgi \
# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)
		--enable-mysqlnd \
# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)
		--enable-mbstring \
                --enable-soap \
                --enable-exif \
		--with-curl \
                --with-gd \
                --with-jpeg-dir=/usr \
                --with-png-dir=/usr \
                --with-xpm-dir=/usr \
                --with-freetype-dir=/usr \
                --with-t1lib=/usr \
                --enable-gd-native-ttf \
		--enable-gd-jis-conv \
                --with-mysqli \
		--with-libedit \
		--with-openssl \
		--with-zlib \
                --enable-zip \
                #--with-recode \
                --with-readline \
	&& make -j"$(nproc)" \
	&& make install \
	&& { find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; } \
	&& make clean \
	&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false -o APT::AutoRemove::SuggestsImportant=false $buildDeps

COPY docker-php-ext-* /usr/local/bin/

##<autogenerated>##
WORKDIR /var/www/html

RUN set -ex \
	&& cd /usr/local/etc \
	&& if [ -d php-fpm.d ]; then \
		# for some reason, upstream's php-fpm.conf.default has "include=NONE/etc/php-fpm.d/*.conf"
		sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \
		cp php-fpm.d/www.conf.default php-fpm.d/www.conf; \
	else \
		# PHP 5.x don't use "include=" by default, so we'll create our own simple config that mimics PHP 7+ for consistency
		mkdir php-fpm.d; \
		cp php-fpm.conf.default php-fpm.d/www.conf; \
		{ \
			echo '[global]'; \
			echo 'include=etc/php-fpm.d/*.conf'; \
		} | tee php-fpm.conf; \
	fi \
	&& { \
		echo '[global]'; \
		echo 'error_log = /proc/self/fd/2'; \
		echo; \
		echo '[www]'; \
		echo '; if we send this to /proc/self/fd/1, it never appears'; \
		echo 'access.log = /proc/self/fd/2'; \
		echo; \
		echo 'clear_env = no'; \
		echo; \
		echo '; Ensure worker stdout and stderr are sent to the main error log.'; \
		echo 'catch_workers_output = yes'; \
	} | tee php-fpm.d/docker.conf \
	&& { \
		echo '[global]'; \
		echo 'daemonize = no'; \
		echo; \
		echo '[www]'; \
		echo 'listen = [::]:9000'; \
	} | tee php-fpm.d/zz-docker.conf
RUN apt-get update && apt-get install -y cmake libcurl4-openssl-dev pkg-config libmagickcore-dev libmagickwand-dev 
RUN cd /root && mkdir ImageMagick && wget http://www.imagemagick.org/download/ImageMagick.tar.gz && tar -xzf ImageMagick.tar.gz -C ImageMagick

### OPTIONAL: if you want to install imagemagick with webp and jp2 support, uncomment the next lines and change the following line to ...&& ./configure --prefix=/usr --with-jp2 && ... ###
#RUN cd /root && wget http://downloads.webmproject.org/releases/webp/libwebp-0.4.3.tar.gz && tar xf libwebp-0.4.3.tar.gz
#RUN cd /root && wget https://github.com/uclouvain/openjpeg/archive/version.2.1.tar.gz && tar xf version.2.1.tar.gz
#RUN cd /root/openjpeg-version.2.1 && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr && make && make install
#RUN apt-get install -y libjpeg-dev libpng-dev libtiff-dev libgif-dev
#RUN cd /root/libwebp-0.4.3 && ./configure --prefix=/usr && make && make install


RUN cd /root/ImageMagick && VERSION="$(ls)" && cd "${VERSION}" && ./configure --prefix=/usr && make && make install
RUN chmod 755 /usr/local/bin/docker-php-ext-enable

RUN pecl install imagick && docker-php-ext-enable imagick
RUN pecl install -o -f redis && echo "extension=redis.so" > /usr/local/etc/php/conf.d/redis.ini
EXPOSE 9000

CMD ["php-fpm"]
##</autogenerated>##
